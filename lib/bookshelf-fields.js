// Generated by CoffeeScript 1.6.3
(function() {
  var CheckIt, Field, StringField, enable_validation, plugin,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  CheckIt = require('checkit');

  plugin = function(instance) {
    var model;
    model = instance.Model.prototype;
    return model.validate = function(self, attrs, options) {
      if (!('validate' in options) || options.validate) {
        return CheckIt(this.toJSON()).run(this.validations);
      }
    };
  };

  enable_validation = function(self) {
    var old_init;
    if (self.prototype.initialize != null) {
      old_init = self.prototype.initialize;
      return self.prototype.initialize = function() {
        this.on('saving', this.validate, this);
        return old_init.apply(this, arguments);
      };
    } else {
      return self.prototype.initialize = function() {
        return this.on('saving', this.validate, this);
      };
    }
  };

  Field = (function() {
    Field.prototype.readable = true;

    Field.prototype.writable = true;

    function Field(name, options) {
      this.name = name;
      this.options = options != null ? options : {};
      this.validations = [];
      if (this.options.required) {
        this.validations.push('required');
      }
    }

    Field.prototype.contribute_to_model = function(model) {
      var proto, _base;
      proto = model.prototype;
      if (proto._meta == null) {
        proto._meta = {};
      }
      if ((_base = proto._meta).fields == null) {
        _base.fields = [];
      }
      proto._meta.fields.push(this);
      this.append_validations(model);
      return this.create_property(model);
    };

    Field.prototype.append_validations = function(model) {
      var proto;
      proto = model.prototype;
      if (proto.validations == null) {
        proto.validations = {};
      }
      if (this.name in proto.validations) {
        if (!(proto.validations[this.name] instanceof Array)) {
          proto.validations[this.name] = [proto.validations[this.name]];
        }
      } else {
        proto.validations[this.name] = [];
      }
      return proto.validations[this.name].push.apply(proto.validations[this.name], this.validations);
    };

    Field.prototype.create_property = function(model) {
      var proto, spec;
      proto = model.prototype;
      spec = {};
      if (this.readable) {
        spec.get = this.mk_getter();
      }
      if (this.writable) {
        spec.set = this.mk_setter();
      }
      return Object.defineProperty(proto, this.name, spec);
    };

    Field.prototype.mk_getter = function() {
      var name;
      name = this.name;
      return function() {
        return this.get(name);
      };
    };

    Field.prototype.mk_setter = function() {
      var name;
      name = this.name;
      return function(value) {
        return this.set(name, value);
      };
    };

    return Field;

  })();

  StringField = (function(_super) {
    __extends(StringField, _super);

    function StringField(name, options) {
      StringField.__super__.constructor.call(this, name, options);
      if (this.options.min_length != null) {
        this.validations.push("minLength:" + this.options.min_length);
      }
      if (this.options.max_length != null) {
        this.validations.push("maxLength:" + this.options.max_length);
      }
    }

    return StringField;

  })(Field);

  Function.prototype.field = function(cls, name, options) {
    var f;
    f = new cls(name, options);
    return f.contribute_to_model(this);
  };

  module.exports = {
    plugin: plugin,
    enable_validation: enable_validation,
    Field: Field,
    StringField: StringField
  };

}).call(this);
