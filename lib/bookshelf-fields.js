// Generated by CoffeeScript 1.7.1
(function() {
  var CheckIt, deep_clone, enable_validation, exports, f, field, fields, k, plugin, _ref,
    __slice = [].slice;

  CheckIt = require('checkit');

  deep_clone = function(obj) {
    var k, res, v;
    res = {};
    for (k in obj) {
      v = obj[k];
      switch (false) {
        case !(v instanceof Array):
          res[k] = v.slice(0);
          break;
        case typeof v !== 'object':
          res[k] = deep_clone(v);
          break;
        default:
          res[k] = v;
      }
    }
    return res;
  };

  plugin = function(options) {
    return function(instance) {
      var model, old_format, old_parse;
      if (instance.__helpers_fp == null) {
        instance.__helpers_fp = {};
      }
      instance.__helpers_fp.enable_validation = function() {
        return enable_validation(this);
      };
      instance.__helpers_fp.field = function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return field.apply(null, [this].concat(__slice.call(args)));
      };
      instance.__helpers_fp.fields = function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return fields.apply(null, [this].concat(__slice.call(args)));
      };
      if (options == null) {
        options = {};
      }
      if (options.create_properties == null) {
        options.create_properties = true;
      }
      instance.Model.prototype.__bookshelf_fields_options = options;
      model = instance.Model.prototype;
      model.validate = function(self, attrs, options) {
        var checkit, json, model_validations;
        if (options == null) {
          options = {};
        }
        if (!('validate' in options) || options.validate) {
          json = this.toJSON();
          checkit = CheckIt(this.validations).run(json);
          if ((this.model_validations != null) && this.model_validations instanceof Array && this.model_validations.length > 0) {
            model_validations = this.model_validations;
            checkit = checkit.then(function() {
              return CheckIt({
                all: model_validations
              }).run({
                all: json
              });
            });
          }
          return checkit;
        }
      };
      old_format = model.format;
      model.format = function(attrs, options) {
        var f, _i, _len, _ref;
        attrs = old_format.call(this, attrs, options);
        if ((this.__meta != null) && this.__meta.fields) {
          _ref = this.__meta.fields;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            f = _ref[_i];
            if ('format' in f) {
              f.format(attrs, options);
            }
          }
        }
        return attrs;
      };
      old_parse = model.parse;
      return model.parse = function(resp, options) {
        var attrs, f, _i, _len, _ref;
        attrs = old_parse.call(this, resp, options);
        if ((this.__meta != null) && this.__meta.fields) {
          _ref = this.__meta.fields;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            f = _ref[_i];
            if ('parse' in f) {
              f.parse(attrs, options);
            }
          }
        }
        return attrs;
      };
    };
  };

  enable_validation = function(model) {
    var old_init;
    if (model.prototype.initialize != null) {
      old_init = model.prototype.initialize;
      return model.prototype.initialize = function() {
        this.on('saving', this.validate, this);
        return old_init.apply(this, arguments);
      };
    } else {
      return model.prototype.initialize = function() {
        return this.on('saving', this.validate, this);
      };
    }
  };

  field = function(model, cls, name, options) {
    var f;
    f = new cls(name, options);
    return f.contribute_to_model(model);
  };

  fields = function() {
    var cls, model, name, options, specs, _i, _len, _ref, _results;
    model = arguments[0], specs = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    _results = [];
    for (_i = 0, _len = specs.length; _i < _len; _i++) {
      _ref = specs[_i], cls = _ref[0], name = _ref[1], options = _ref[2];
      _results.push(field(model, cls, name, options));
    }
    return _results;
  };

  exports = {
    plugin: plugin,
    field: field,
    fields: fields,
    enable_validation: enable_validation
  };

  _ref = require('./fields');
  for (k in _ref) {
    f = _ref[k];
    exports[k] = f;
  }

  module.exports = exports;

}).call(this);
