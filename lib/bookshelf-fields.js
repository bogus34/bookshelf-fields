// Generated by CoffeeScript 1.6.3
(function() {
  var CheckIt, Field, StringField, cleanup_function_prototype, enable_validation, field, fields, plugin, polute_function_prototype,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  CheckIt = require('checkit');

  plugin = function(instance) {
    var model, old_format, old_parse;
    model = instance.Model.prototype;
    model.validate = function(self, attrs, options) {
      if (!('validate' in options) || options.validate) {
        return CheckIt(this.toJSON()).run(this.validations);
      }
    };
    old_format = model.format;
    model.format = function(attrs, options) {
      var f, _i, _len, _ref;
      attrs = old_format.call(this, attrs, options);
      if ((this.__meta != null) && this.__meta.fields) {
        _ref = this.__meta.fields;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          f = _ref[_i];
          if ('format' in f) {
            f.format(attrs, options);
          }
        }
      }
      return attrs;
    };
    old_parse = model.parse;
    return model.parse = function(resp, options) {
      var attrs, f, _i, _len, _ref;
      attrs = old_parse.call(this, resp, options);
      if ((this.__meta != null) && this.__meta.fields) {
        _ref = this.__meta.fields;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          f = _ref[_i];
          if ('parse' in f) {
            f.parse(attrs, options);
          }
        }
      }
      return attrs;
    };
  };

  Field = (function() {
    Field.prototype.readable = true;

    Field.prototype.writable = true;

    function Field(name, options) {
      this.name = name;
      this.options = options != null ? options : {};
      this.validations = [];
      if (this.options.required) {
        this.validations.push('required');
      }
    }

    Field.prototype.contribute_to_model = function(model) {
      var proto, _base;
      proto = model.prototype;
      if (proto.__meta == null) {
        proto.__meta = {};
      }
      if ((_base = proto.__meta).fields == null) {
        _base.fields = [];
      }
      proto.__meta.fields.push(this);
      this.append_validations(model);
      return this.create_property(model);
    };

    Field.prototype.append_validations = function(model) {
      var proto;
      proto = model.prototype;
      if (proto.validations == null) {
        proto.validations = {};
      }
      if (this.name in proto.validations) {
        if (!(proto.validations[this.name] instanceof Array)) {
          proto.validations[this.name] = [proto.validations[this.name]];
        }
      } else {
        proto.validations[this.name] = [];
      }
      return proto.validations[this.name].push.apply(proto.validations[this.name], this.validations);
    };

    Field.prototype.create_property = function(model) {
      var proto, spec;
      proto = model.prototype;
      spec = {};
      if (this.readable) {
        spec.get = this.mk_getter();
      }
      if (this.writable) {
        spec.set = this.mk_setter();
      }
      return Object.defineProperty(proto, this.name, spec);
    };

    Field.prototype.mk_getter = function() {
      var name;
      name = this.name;
      return function() {
        return this.get(name);
      };
    };

    Field.prototype.mk_setter = function() {
      var name;
      name = this.name;
      return function(value) {
        return this.set(name, value);
      };
    };

    return Field;

  })();

  StringField = (function(_super) {
    __extends(StringField, _super);

    function StringField(name, options) {
      StringField.__super__.constructor.call(this, name, options);
      if (this.options.min_length != null) {
        this.validations.push("minLength:" + this.options.min_length);
      }
      if (this.options.max_length != null) {
        this.validations.push("maxLength:" + this.options.max_length);
      }
    }

    return StringField;

  })(Field);

  enable_validation = function(model) {
    var old_init;
    if (model.prototype.initialize != null) {
      old_init = model.prototype.initialize;
      return model.prototype.initialize = function() {
        this.on('saving', this.validate, this);
        return old_init.apply(this, arguments);
      };
    } else {
      return model.prototype.initialize = function() {
        return this.on('saving', this.validate, this);
      };
    }
  };

  field = function(model, cls, name, options) {
    var f;
    f = new cls(name, options);
    return f.contribute_to_model(model);
  };

  fields = function() {
    var cls, model, name, options, specs, _i, _len, _ref, _results;
    model = arguments[0], specs = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    _results = [];
    for (_i = 0, _len = specs.length; _i < _len; _i++) {
      _ref = specs[_i], cls = _ref[0], name = _ref[1], options = _ref[2];
      _results.push(field(model, cls, name, options));
    }
    return _results;
  };

  polute_function_prototype = function() {
    Function.prototype.field = function(cls, name, options) {
      return field(this, cls, name, options);
    };
    Function.prototype.fields = function() {
      var specs;
      specs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      specs.unshift(this);
      return fields.apply(this, specs);
    };
    return Function.prototype.enable_validation = function() {
      return enable_validation(this);
    };
  };

  cleanup_function_prototype = function() {
    delete Function.prototype.field;
    delete Function.prototype.fields;
    return delete Function.prototype.enable_validation;
  };

  module.exports = {
    plugin: plugin,
    field: field,
    fields: fields,
    enable_validation: enable_validation,
    polute_function_prototype: polute_function_prototype,
    cleanup_function_prototype: cleanup_function_prototype,
    Field: Field,
    StringField: StringField
  };

}).call(this);
