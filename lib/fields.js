// Generated by CoffeeScript 1.7.1
(function() {
  var BooleanField, DateField, DateTimeField, EmailField, Field, FloatField, IntField, JSONField, NumberField, StringField, e, isArray,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  isArray = require('util').isArray;

  e = {};

  e.Field = Field = (function() {
    Field.prototype.readable = true;

    Field.prototype.writable = true;

    function Field(name, options) {
      var _base;
      this.name = name;
      this.options = options != null ? options : {};
      this._validate_choices = __bind(this._validate_choices, this);
      if ((_base = this.options).create_property == null) {
        _base.create_property = true;
      }
      this.validations = [];
      this.model_validations = [];
      this._accept_rule('required');
      this._accept_rule('exists');
      if ('choices' in this.options) {
        this.validations.push(this.normalize_rule(this._validate_choices, this.options.choices));
      }
      if ('validations' in this.options) {
        this.validations.push.apply(this.validations, this.options.validations);
      }
    }

    Field.prototype.plugin_option = function(name) {
      return this.model.prototype.__bookshelf_fields_options[name];
    };

    Field.prototype.contribute_to_model = function(model) {
      var proto, _base;
      this.model = model;
      proto = model.prototype;
      if (proto.__meta == null) {
        proto.__meta = {};
      }
      if ((_base = proto.__meta).fields == null) {
        _base.fields = [];
      }
      proto.__meta.fields.push(this);
      this.append_validations(model);
      if (this.plugin_option('create_properties') && this.options['create_property'] && this.name !== 'id') {
        return this.create_property(model);
      }
    };

    Field.prototype.append_validations = function(model) {
      var proto;
      proto = model.prototype;
      if (proto.validations == null) {
        proto.validations = {};
      }
      if (this.name in proto.validations) {
        if (!(proto.validations[this.name] instanceof Array)) {
          proto.validations[this.name] = [proto.validations[this.name]];
        }
      } else {
        proto.validations[this.name] = [];
      }
      proto.validations[this.name].push.apply(proto.validations[this.name], this.validations);
      if (this.model_validations.length > 0) {
        if (proto.model_validations == null) {
          proto.model_validations = [];
        }
        return proto.model_validations.push.apply(proto.model_validations, this.model_validations);
      }
    };

    Field.prototype.create_property = function(model) {
      var proto, spec;
      proto = model.prototype;
      spec = {};
      if (this.readable) {
        spec.get = this.mk_getter();
      }
      if (this.writable) {
        spec.set = this.mk_setter();
      }
      return Object.defineProperty(proto, this.name, spec);
    };

    Field.prototype.mk_getter = function() {
      var name;
      name = this.name;
      return function() {
        return this.get(name);
      };
    };

    Field.prototype.mk_setter = function() {
      var name;
      name = this.name;
      return function(value) {
        return this.set(name, value);
      };
    };

    Field.prototype.normalize_rule = function(rule, value) {
      var k, result, v;
      switch (false) {
        case !(typeof value === 'object' && !isArray(value)):
          result = {
            rule: rule
          };
          for (k in value) {
            v = value[k];
            result[k] = v;
          }
          if ('value' in result) {
            if (typeof rule === 'string') {
              result.rule += ':' + result.value;
            } else {
              result.params = result.value;
            }
            delete result.value;
          }
          result.params || (result.params = []);
          return result;
        case typeof value !== 'boolean':
          return rule;
        case typeof rule !== 'string':
          return "" + rule + ":" + value;
        default:
          return this.normalize_rule(rule, {
            value: value
          });
      }
    };

    Field.prototype._validate_choices = function() {
      var choices, comparator, value, variant, _i, _len;
      value = arguments[0], choices = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      comparator = this.options.comparator != null ? this.options.comparator : function(a, b) {
        return a === b;
      };
      for (_i = 0, _len = choices.length; _i < _len; _i++) {
        variant = choices[_i];
        if (comparator(value, variant)) {
          return true;
        }
      }
      return false;
    };

    Field.prototype._accept_rule = function(names, rule) {
      var name, _i, _len;
      if (!isArray(names)) {
        names = [names];
      }
      if (rule == null) {
        rule = names[0];
      }
      for (_i = 0, _len = names.length; _i < _len; _i++) {
        name = names[_i];
        if (!(name in this.options)) {
          continue;
        }
        this.validations.push(this.normalize_rule(rule, this.options[name]));
        return;
      }
    };

    return Field;

  })();

  e.StringField = StringField = (function(_super) {
    __extends(StringField, _super);

    function StringField(name, options) {
      StringField.__super__.constructor.call(this, name, options);
      this._accept_rule(['minLength', 'min_length']);
      this._accept_rule(['maxLength', 'max_length']);
    }

    return StringField;

  })(Field);

  e.EmailField = EmailField = (function(_super) {
    __extends(EmailField, _super);

    function EmailField(name, options) {
      EmailField.__super__.constructor.call(this, name, options);
      this.validations.push('email');
    }

    return EmailField;

  })(StringField);

  e.NumberField = NumberField = (function(_super) {
    __extends(NumberField, _super);

    function NumberField(name, options) {
      NumberField.__super__.constructor.call(this, name, options);
      this._accept_rule(['naturalNonZero', 'positive']);
      this._accept_rule('natural');
      this._accept_rule(['greaterThan', 'greater_than', 'gt']);
      this._accept_rule(['greaterThanEqualTo', 'greater_than_equal_to', 'gte', 'min']);
      this._accept_rule(['lessThan', 'less_than', 'lt']);
      this._accept_rule(['lessThanEqualTo', 'less_than_equal_to', 'lte', 'max']);
    }

    return NumberField;

  })(Field);

  e.IntField = IntField = (function(_super) {
    __extends(IntField, _super);

    function IntField(name, options) {
      IntField.__super__.constructor.call(this, name, options);
      this.validations.unshift('integer');
    }

    IntField.prototype.parse = function(attrs) {
      if (this.name in attrs) {
        return attrs[this.name] = parseInt(attrs[this.name]);
      }
    };

    return IntField;

  })(NumberField);

  e.FloatField = FloatField = (function(_super) {
    __extends(FloatField, _super);

    function FloatField(name, options) {
      FloatField.__super__.constructor.call(this, name, options);
      this.validations.unshift('isNumeric');
    }

    FloatField.prototype.parse = function(attrs) {
      if (this.name in attrs) {
        return attrs[this.name] = parseFloat(attrs[this.name]);
      }
    };

    return FloatField;

  })(NumberField);

  e.BooleanField = BooleanField = (function(_super) {
    __extends(BooleanField, _super);

    function BooleanField() {
      return BooleanField.__super__.constructor.apply(this, arguments);
    }

    BooleanField.prototype.parse = function(attrs) {
      if (this.name in attrs) {
        return attrs[this.name] = !!attrs[this.name];
      }
    };

    BooleanField.prototype.format = function(attrs) {
      if (this.name in attrs) {
        return attrs[this.name] = !!attrs[this.name];
      }
    };

    return BooleanField;

  })(Field);

  e.DateTimeField = DateTimeField = (function(_super) {
    __extends(DateTimeField, _super);

    function DateTimeField(name, options) {
      DateTimeField.__super__.constructor.call(this, name, options);
      this.validations.push(this._validate_datetime);
    }

    DateTimeField.prototype.parse = function(attrs) {
      if (this.name in attrs) {
        return attrs[this.name] = new Date(attrs[this.name]);
      }
    };

    DateTimeField.prototype.format = function(attrs) {
      if (this.name in attrs && !(attrs[this.name] instanceof Date)) {
        return attrs[this.name] = new Date(attrs[this.name]);
      }
    };

    DateTimeField.prototype._validate_datetime = function(value) {
      if (value instanceof Date) {
        return true;
      }
      if (typeof value === 'string' && !isNaN(Date.parse(value))) {
        return true;
      }
      return false;
    };

    return DateTimeField;

  })(Field);

  e.DateField = DateField = (function(_super) {
    __extends(DateField, _super);

    function DateField() {
      return DateField.__super__.constructor.apply(this, arguments);
    }

    DateField.prototype.parse = function(attrs) {
      var d;
      if (this.name in attrs) {
        d = new Date(attrs[this.name]);
        return attrs[this.name] = new Date(d.getFullYear(), d.getMonth(), d.getDate());
      }
    };

    DateField.prototype.format = function(attrs) {
      var d;
      if (this.name in attrs) {
        d = !(attrs[this.name] instanceof Date) ? new Date(attrs[this.name]) : attrs[this.name];
        return attrs[this.name] = new Date(d.getFullYear(), d.getMonth(), d.getDate());
      }
    };

    return DateField;

  })(DateTimeField);

  e.JSONField = JSONField = (function(_super) {
    __extends(JSONField, _super);

    function JSONField(name, options) {
      JSONField.__super__.constructor.call(this, name, options);
      this.validations.push(this._validate_json);
    }

    JSONField.prototype.format = function(attrs) {
      if (!(attrs[this.name] && typeof attrs[this.name] === 'object')) {
        return;
      }
      return attrs[this.name] = JSON.stringify(attrs[this.name]);
    };

    JSONField.prototype.parse = function(attrs) {
      if (!(attrs[this.name] && typeof attrs[this.name] === 'string')) {
        return;
      }
      return attrs[this.name] = JSON.parse(attrs[this.name]);
    };

    JSONField.prototype._validate_json = function(value) {
      if (typeof value === 'object') {
        return true;
      }
      if (typeof value !== 'string') {
        return false;
      }
      JSON.parse(value);
      return true;
    };

    return JSONField;

  })(Field);

  module.exports = e;

}).call(this);
