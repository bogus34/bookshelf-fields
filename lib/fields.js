// Generated by CoffeeScript 1.6.3
(function() {
  var BooleanField, DateField, DateTimeField, EmailField, Field, FloatField, IntField, NumberField, StringField, e, _ref, _ref1,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  e = {};

  e.Field = Field = (function() {
    Field.prototype.readable = true;

    Field.prototype.writable = true;

    function Field(name, options) {
      this.name = name;
      this.options = options != null ? options : {};
      this._validate_choices = __bind(this._validate_choices, this);
      this.validations = [];
      this.model_validations = [];
      if (this.options.required) {
        this.validations.push('required');
      }
      if ('nullable' in this.options && !this.options.nullable) {
        name = this.name;
        this.model_validations.push(function(value) {
          return value[name] != null;
        });
      }
      if ('choices' in this.options) {
        this.validations.push(this._validate_choices);
      }
    }

    Field.prototype.contribute_to_model = function(model) {
      var proto, _base;
      proto = model.prototype;
      if (proto.__meta == null) {
        proto.__meta = {};
      }
      if ((_base = proto.__meta).fields == null) {
        _base.fields = [];
      }
      proto.__meta.fields.push(this);
      this.append_validations(model);
      if (this.name !== 'id') {
        return this.create_property(model);
      }
    };

    Field.prototype.append_validations = function(model) {
      var proto;
      proto = model.prototype;
      if (proto.validations == null) {
        proto.validations = {};
      }
      if (this.name in proto.validations) {
        if (!(proto.validations[this.name] instanceof Array)) {
          proto.validations[this.name] = [proto.validations[this.name]];
        }
      } else {
        proto.validations[this.name] = [];
      }
      proto.validations[this.name].push.apply(proto.validations[this.name], this.validations);
      if (this.model_validations.length > 0) {
        if (proto.model_validations == null) {
          proto.model_validations = [];
        }
        return proto.model_validations.push.apply(proto.model_validations, this.model_validations);
      }
    };

    Field.prototype.create_property = function(model) {
      var proto, spec;
      proto = model.prototype;
      spec = {};
      if (this.readable) {
        spec.get = this.mk_getter();
      }
      if (this.writable) {
        spec.set = this.mk_setter();
      }
      return Object.defineProperty(proto, this.name, spec);
    };

    Field.prototype.mk_getter = function() {
      var name;
      name = this.name;
      return function() {
        return this.get(name);
      };
    };

    Field.prototype.mk_setter = function() {
      var name;
      name = this.name;
      return function(value) {
        return this.set(name, value);
      };
    };

    Field.prototype._validate_choices = function(value) {
      var choices, comparator, variant, _i, _len;
      choices = this.options.choices;
      comparator = this.options.comparator != null ? this.options.comparator : function(a, b) {
        return a === b;
      };
      if (choices instanceof Array) {
        for (_i = 0, _len = choices.length; _i < _len; _i++) {
          variant = choices[_i];
          if (comparator(value, variant)) {
            return true;
          }
        }
      } else if (typeof choices === 'object') {
        for (variant in choices) {
          if (comparator(value, variant)) {
            return true;
          }
        }
      }
      return false;
    };

    return Field;

  })();

  e.StringField = StringField = (function(_super) {
    __extends(StringField, _super);

    function StringField(name, options) {
      StringField.__super__.constructor.call(this, name, options);
      this._normalize_options();
      if (this.options.min_length != null) {
        this.validations.push("minLength:" + this.options.min_length);
      }
      if (this.options.max_length != null) {
        this.validations.push("maxLength:" + this.options.max_length);
      }
    }

    StringField.prototype._normalize_options = function() {
      var k, _results;
      _results = [];
      for (k in this.options) {
        switch (k) {
          case 'minLength':
            this.options.min_length = this.options[k];
            _results.push(delete this.options[k]);
            break;
          case 'maxLength':
            this.options.max_length = this.options[k];
            _results.push(delete this.options[k]);
            break;
          default:
            _results.push(void 0);
        }
      }
      return _results;
    };

    return StringField;

  })(Field);

  e.EmailField = EmailField = (function(_super) {
    __extends(EmailField, _super);

    function EmailField(name, options) {
      EmailField.__super__.constructor.call(this, name, options);
      this.validations.push('validEmail');
    }

    return EmailField;

  })(StringField);

  e.NumberField = NumberField = (function(_super) {
    __extends(NumberField, _super);

    function NumberField(name, options) {
      NumberField.__super__.constructor.call(this, name, options);
      this._normalize_options();
      if (this.options.positive) {
        this.validations.push('isPositive');
      }
      if (this.options.greater_than != null) {
        this.validations.push("greaterThan:" + this.options.greater_than);
      }
      if (this.options.greater_than_equal_to != null) {
        this.validations.push("greaterThanEqualTo:" + this.options.greater_than_equal_to);
      }
      if (this.options.less_than != null) {
        this.validations.push("lessThan:" + this.options.less_than);
      }
      if (this.options.less_than_equal_to != null) {
        this.validations.push("lessThanEqualTo:" + this.options.less_than_equal_to);
      }
    }

    NumberField.prototype._normalize_options = function() {
      var k, _results;
      _results = [];
      for (k in this.options) {
        switch (k) {
          case 'gt':
          case 'greaterThan':
            this.options.greater_than = this.options[k];
            _results.push(delete this.options[k]);
            break;
          case 'gte':
          case 'greaterThanEqualTo':
          case 'min':
            this.options.greater_than_equal_to = this.options[k];
            _results.push(delete this.options[k]);
            break;
          case 'lt':
          case 'lessThan':
            this.options.less_than = this.options[k];
            _results.push(delete this.options[k]);
            break;
          case 'lte':
          case 'lessThanEqualTo':
          case 'max':
            this.options.less_than_equal_to = this.options[k];
            _results.push(delete this.options[k]);
            break;
          default:
            _results.push(void 0);
        }
      }
      return _results;
    };

    return NumberField;

  })(Field);

  e.IntField = IntField = (function(_super) {
    __extends(IntField, _super);

    function IntField(name, options) {
      IntField.__super__.constructor.call(this, name, options);
      this.validations.unshift('isInteger');
    }

    IntField.prototype.parse = function(attrs) {
      if (this.name in attrs) {
        return attrs[this.name] = parseInt(attrs[this.name]);
      }
    };

    return IntField;

  })(NumberField);

  e.FloatField = FloatField = (function(_super) {
    __extends(FloatField, _super);

    function FloatField(name, options) {
      FloatField.__super__.constructor.call(this, name, options);
      this.validations.unshift('isNumeric');
    }

    FloatField.prototype.parse = function(attrs) {
      if (this.name in attrs) {
        return attrs[this.name] = parseFloat(attrs[this.name]);
      }
    };

    return FloatField;

  })(NumberField);

  e.BooleanField = BooleanField = (function(_super) {
    __extends(BooleanField, _super);

    function BooleanField() {
      _ref = BooleanField.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    BooleanField.prototype.parse = function(attrs) {
      if (this.name in attrs) {
        return attrs[this.name] = !!attrs[this.name];
      }
    };

    BooleanField.prototype.format = function(attrs) {
      if (this.name in attrs) {
        return attrs[this.name] = !!attrs[this.name];
      }
    };

    return BooleanField;

  })(Field);

  e.DateTimeField = DateTimeField = (function(_super) {
    __extends(DateTimeField, _super);

    function DateTimeField(name, options) {
      DateTimeField.__super__.constructor.call(this, name, options);
      this.validations.push(this._validate_datetime);
    }

    DateTimeField.prototype.parse = function(attrs) {
      if (this.name in attrs) {
        return attrs[this.name] = new Date(attrs[this.name]);
      }
    };

    DateTimeField.prototype.format = function(attrs) {
      if (this.name in attrs && !(attrs[this.name] instanceof Date)) {
        return attrs[this.name] = new Date(attrs[this.name]);
      }
    };

    DateTimeField.prototype._validate_datetime = function(value) {
      if (value instanceof Date) {
        return true;
      }
      if (typeof value === 'string' && !isNaN(Date.parse(value))) {
        return true;
      }
      return false;
    };

    return DateTimeField;

  })(Field);

  e.DateField = DateField = (function(_super) {
    __extends(DateField, _super);

    function DateField() {
      _ref1 = DateField.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    DateField.prototype.parse = function(attrs) {
      var d;
      if (this.name in attrs) {
        d = new Date(attrs[this.name]);
        return attrs[this.name] = new Date(d.getFullYear(), d.getMonth(), d.getDate());
      }
    };

    DateField.prototype.format = function(attrs) {
      var d;
      if (this.name in attrs) {
        d = !(attrs[this.name] instanceof Date) ? new Date(attrs[this.name]) : attrs[this.name];
        return attrs[this.name] = new Date(d.getFullYear(), d.getMonth(), d.getDate());
      }
    };

    return DateField;

  })(DateTimeField);

  module.exports = e;

}).call(this);
